Java:
=====
   java is a programming language
   
   language:
   --------
   communiction with humans
   
     eg; telugu,hindi,tamil......
	 
	programming languge:
	======================
	communication with machines
	
	   c,c++,java,.net,python.........
	   
	   Machine language.....0's and 1's or binary code
	   
	   software/application
	   
	   2 types applications:
	   =======================
	   1.standlone /desktop : eg:calcutor,notepad,notepad++,eclipse
	   
	   2.distrubted/network appliactions
	   
	        Eg:  gmail,Instagram,filpkart.....
			      
		2 types in java:
		
          1.pop
          2.oop
		  
    1.pop(procedure oriented prog languge)
	
        eg: c,cobol,b........
		
    2.oop:(object oriented programming language)
	
        eg: java,.net,python,c+++......
	
		1.performance
		2.security
		
		oops pardigm:
		=============
		  in java 4 concepts oops:
		  =======================
		        1inheritance
				2.polymorhisam--------performance
				3.abstruction
				4.encapuslation--------security
				
	    java:
		======
		
		   java is a object oriented programming language
		
		history of java:
		================
		
		  java-----1995------>sun micro system-------->oracle corporation
		  
		  Father of java ----->Games Gosling..
		  
		  jdk 1.0----(java development kit)
		  
		  current version ..........>jdk 21
		  
		  stadandrd version...8,11,17-------------> It is used for long term support
		  
		  in java we have 3 types of Editions:
		  ====================================
		    1.jse(java standard edition).......core java appl
			
			2.jee(java enterprise edition)........Adavance application(spring,jsp)
			
			3.jme(java mobile/micro applications)...Andriod
			
			
		why java??
		-----------
		      1.platform independent...........>WORA(Write once run anywhere)
			  
			  2.Garbage collection
			  
			  1.platform indenpendent:
			  
			  user1        user2        user3
			  
              windows 		 mac	    linux
			  
			  
			  2.Garbage collection:
			  =====================
			      It will collect the unwanted memory space....
				  
				  Garbage collector..........
				  
				  Garbage collection
				  
				  Eg:
				      300 varaibles
					  
					   250 
					   
			pre requisties of the java program:
		     ==================================
			 
			1.  download software(jdk)
			
			2.  install the software
			
			3.  Eclipse,notepad,notepad++,netbeans...
			
			4.  write the java program
			
			5.  save the file(.java)
			
			6.  compile the program
			
			7.  excute the file
			
			
			class classname{
			
			public static void main(String[] args){
			
			  // logic
			  
			  System.out.println("Welcome to java");
			
			}
			
			
			}
			
		compilation	:
		============
		
			          compiler                     jvm
		source code/java ------------------byte code----------->ouput	
		  
		 	  
		  javac filename.java------->To compile
		  
		  java classname-----> To execution

           		
	sturure of java program:
	==========================
	
	class classname{
	
	public static void main(String[] args){
	
	// logic
	
	System.out.println("Hello......");
	
	
	}
	
	
	}
	
	class:
	=====
	  every java program has be written inside the class
	  
	main():
	=======
	      main is method name.....it is a start /entry point of the java program
		  
		  
		  execution is start from the main method
		  
		  
    fundamentals in java:
	=======================
	 
	 class  :  class is a keyword it is used declare the class
	 
	 public : public is a keyword...access modifier...it gives permission to access things..
	 
	 void   :  void is nothing ....its returns nothing
	 
	 static :  static is a keyword....by using class name
	 
	 main() :  its is the start point of the java program...execution is start from the main method...
	 
	 String:  string is a predefined class....can be used as data type
	 
	 args[] :   parameters
	 
	 String[] args :  can be used for commandline arguments
	 
	 System : predefined class
	 
	 out : out is a obj for the system class
	 
	 println :  it is a method to print the statement....
	 
	 compiler
	 
	           compiler    .classfile       jvm                   cpu
	 java code---------->bytecode--------> machine code----->output
	 
	 
	 jdk,jre,jvm:
	 ==============
	 
	 1.JDK :
     ===========	 
	                 
					 java development kit
					 
					 inside jdk (jre + development tools)
	 
	 2.JRE :
     =======	 
	                 java runtinme environment
					 
					 (jvm + libraries)
	 
	 3. JVM :
	 ==========
	 
	        java virtual Machine
			
			
	            it excutes the bytecode into native machine code after it gives instructions to the cpu
				and displays highlevel langugae...(output)
	 
	 Day 3:
	 ======
	 language fundamentals:
	 =====================
	      keywords
		  variables
		  main()
		  arrays
		  datatypes
		  command arguments
		  
		1.keywords:
        ============
        53 keywords
        
        all keywords have to be lower case only

     	2.identifiers:
=   ===================
       	any name in java consider as a identifier..	
		
		class name,  variable name,method name,,,interface name
		
		naming conventions:
		====================
		class name first letter should be captial letter
		
		always start with cappital letter
		
		eg:   Helloworld(not good programming)....HelloWorld
		
		* all variables,methods follows camelCase
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		   Eg:   nameOfStudent-------> camelCase
		   
		   Eg:    method name------addOfTwo
		   
		  * all keywords  have to lower caseonly
		  
		  * java is a case sensitive
		  
		  
		  
		  
		
		
		
		
		
		rules and restrictions:
		
		-----------------------
		
		rules:
		======
		   a to z ------> are allowed
		   
		   A to Z -----> are allowed
		   
		   0 to 9 ------> are allowed
		   
		symbols:
		========
		
		$ -----> Dollar
		
		_ -------> underscore-----------> are allowed
		
		
		restrictions :
		==============
		
		1..should not start with digits
		
		2.  no other symbols are not allowed
		
		3. keywords are not allowed to use an identifier...
		
		
	class HelloWorld{
	
	public static void main(String[] args){
	
	// logic
	
	System.out.println("Hello......");
	
	
	}
	
	
	}
		   
	4 identifiers in above program....


     
    eg:  
    
           student1-------->	it is avalid
		   
		   1student---------->  it is not invalid
		   
		   
		   num = 10;----->
		   
		   Num = 20;-----> java follws the case sensitive
		   
		   num$ ------->  valid
		   
		   num# -------> it is not invalid
		   
		   
		   
		   _$_$_S ----> valid(it is not good prgromenig)
		   
		   public = 50;  invalid
		   
		   * keywords are not allowed to use an identifier......
		   
		   15names-------->invalid
		   
		   
		   
		   datatypes:
		   ==========
		   
		   representing the type of the data which we want to stored in varaible..
		   
		   
		   student name,student marks,student address...
		   
		        eg: int   marks = 100;
				String name = "Anjali";
		   
		 2 types: 
         =================
         1.premitive datatypes
		 
		    8 premitive.......> numeric,non numeric
			
			byte
			short
			int
			long
			float
			double--------numeric datatype
			char
			boolean------non numeric
		 
		 
         2.non premitive 

            String,arrays,classes	
        
		1 byte = 8 bits
		
		formula:
        ========
		
		-2^n-1 to (2^n-1)-1   n-----> number of bits
         
        datatype                size                    ranges                    default value	

		
		byte                   1 byte                -128 to 127                       0
		
		short                  2 byte                -32768 to 32767                   0
		
		int                    4 byte                -2147483648 to 2147483647         0
		
		long                   8 byte                                                  0
		
		float                  4 byte                                                  0.0
		
		double                 8 byte                                                  0.0
		
		char                   2 byte                  0 to 65535                     space
		
		boolean                1 bit                                                 False/1
		
		true/false (0 , 1)
		
	day 4 :
==========	
		
	variables:
	==========
	variable is container which can be stored the values/data
	
	variable is name of the memory location
	
	variable 2 types:
	
	
	1.local variable---------- inside the method
	
	2.global variable-------->inside class but oustide method
	
	     2 types:
		 
		 1.static 
		 
		 2.instance
	
	class Welcome{
	
	int a = 10; // global variable
	
	pvsm(String[] args){
	
	int age = 25; //local variables
	
	
	}
	
	}
	
	syntax:
	=======
	intilize the variable:
	=======================
	datatyepe variable name = value/data;
	
	Eg: char    gender = 'f';
	
	
	declare :
	============
	
	int a ;
	byte b;
	
	1.syntax:
	
	=========
	  eg:   static String  name = "anjali"; ---------->static properites(varaibale/methods)
	  
	        instance ------->without static
			
			
	2.memory allocation:
	=======================
	
	   static properties------>only once at time of class loading into jvm
	   
	   instnce properties: ------> every obj creattion
	   
	   
	3.how to access:
	===============
	
	   static properties can be access by using class name....
	   
	   instance properties----by using th obj ref
	   
	   
	   obj is a instance of class
	   
	   instance----------> memory
	   
	   instansation---------->memorycreation
	   
	   
	   syntax:
	   =======
	   creating an obj:
	   ==================
	   
	   classname obj = new classname();
	   
	   eg:  A   obj = new A();
	  
	4.when to access:
====================
     static properties-----common properties----------school name/clg name
	  
     instance properties-----unique data--->contact no---> pan card/ adhar card	  
	     
	
	day 5:
	======
	
	Methods:   method is a block code which is defined to perform special task...
	
	syntax:
	
	   accessmodifier  return type     methodname  (if any any parameters)// method declaration/header
	   {
	   // logic
	      // method body
	   
	   }
	   
	   eg: public static void main(String[] args){
	   
	   
	       
		   
		   }
		   
		   public is a access modifier
		   
		   static is a optional
		   
		   void-----it returns nothing
		   main-----name of the method
		   
		   method offer us code resusability
		   
		   
		   method name following cameCase-----displayMsg()
		   
		   
		   we have 2 types methods:
		   
		     1.pre ddefined method --------eg: main(),length(),println()
			 
			 2.user defined method-------> these methods written by programmer as we are requrinent
			 
			 
			      2 types:
				  
				  1.static method----->by uing classname
				  2.instance method_----->by using obj ref
		   
		   
	Day 6 :
	======
	TypeCasting:
	============
	the process of converting the values of one datatype to another data type
	
	we have 2 typecasting:
	
	1.widenning casting(automatically)
	   
	   converting a smallar datatype to larger datatype
	   
	   byte--short---char---int---float---double
	
	2.narrowing casting(manually):
	
	     coverting a larger data type to smaller data type.....
		 
    lossy conversion:
	=================
	if we are trying to convergt larger datatype to smaller datatype ,the data which doesnot fit into the smallwr datatype...thwe data
	the data will be lost....
	
	package:
	========
	
	collectin of java class librairies...
	
	eg: slaray package(bonus,hra,incentives,basic)
	
	why to maintain package:
	========================
	
	we have an easy to access the files.....
	
	
	we have 2 types of packages:
	
	1.predefined package
	
	2.user defined package...
	
	**java.lang.object is the default package for all the java programs
	
	**object is a super class for all the classes
	
	we are having 11 methods-----java.lang.package
	
	package is used to create the pacakge
	
	import keyword is used access the other packages .
	
	syntax:
	
	import packagename.*;// imports the all classes and intefaces of other packages
	
	eg: import java.util.Scanner;
	the standard for defing the package is domain.company.package;
	eg: com.traines.corejava;
	
	to command the package:
	
	======================
	   javac -d . classname.java// d means directry....(.) current directory
	   
	 to execute the java program:
	 =============================
	 
	 java packagename.classname
	   
	 Day 7:
     ======
     commandline argumnets:
============================
  eg: Gmail
  
  in java we are giving inputs in 3 options
  
  
  to give inputs dynamically, 
  1.commandline arguments
  2.**scanner class
  3.Buffer Reader(file concept)
  
  
  1.commandline arguments:
  ========================
  
  public static void main(String[] args){
  
  
  }
  public static void display(String s){
  S.o.p("String s:" + s);
  
  }
  
  classname.display("Anjali");
  
  
  int a = 1;
  int a[]= {1,2,3,4,5,6};
  String s[]= {"Anjali","1","4.5","true"};
  
  arrays----->index starts from the -------->0
  
  n -----> max num array size ___________>n-1
  4,----3
  
  why string??/
  
  String S = "Anjali";
  int i = "25";
  float f = "2.5";
 
  args[0] = "Anjali";
  args[1] = "1";
  
  wrapper classes:
  =====================
  converts the string data type to another data type
  in java 8 wrapper classes for 8 datatypes
  datatypes       wrapper classes
  
  byte               Byte
  short              Short
  int                Integer
  long               Long
  float              Float
  double             Double
  char               Character
  boolean            Boolean
  
  parseInt(),parseFloat(),parseBoolean()...........
  int a = Integer.parseInt(args[0]);
  int b = Integer.parseInt(args[1])
	
Day 8
=====
Scanner class:
==============
another way to taking the input from the users
scanner is predefined class..which is available from the java.util.package;
import java.util.Scanner;(ctrl+shift+o) 
we have to create the scanner object
Scanner scan = new Scanner(System.in);

System is a predefined class------> java.lang.package
in means static property

next(),nextInt(),nextFloat(),nextBoolean(),.......>


Day 9:
=====
Operators
==========
operatoe is a symbol..that is used to perform the opeartions
eg: addition,subtraction,mutliplication,division
+,-,*,/,%	
	
	unary operators
	arthametic operators
	realtional operators
	assignment 
	bitwise
	-----
1.arthametic operations:
========================
+,-,*,/,%(modulus)
2.assignment operator:
======================
=,+=,-=
https://www.javatpoint.com/operators-in-java

3.unary operator:
================
prefix------>> beffore the varaible we can use
postfix------->>>> after the variable we can use...
prefix---- ++a,--a
postfix-----a++ , a--

4.realational operators:
========================
cpmpare the two values...
a > b  or a==b a!= b....

day 10:
========
Flow Controls:
==============

java provides statements which control flow of the code

in java we have 3 types of statements:
======================================
1.selections stmts/decision making stmts/decision
2.Iterative stmts/ loops stmts
3.Jump stmts/ Transfer stmts

1.Decision making statement:
==========================
2 types:
========
1.if statement
2.switch statement
1.if statement:
==============
4 types:

1.simple if
2.if else
3.if else if ladder
4.nested if

1.simple if:
==============
syntax:
========

if(condition){// when condition is true

//logic

}

2.if else:
==========
extension of if statement....we are using multipule else block

syntax:
=======

if(condition){ when condition true
// logic

}
else{ when condition false

//logic
}

3.if else if ladder:
====================
syntax:

if(condition 1){ when condition1 is true
// logic
}
else if(condition2){
// logic


}
else{

// logic
}


4.nested if:
===========
if statement if or else if statements

if(condition){

if(condition){

}
else if(){

}
else{

}

}

Day 11:
======
2.Switch statement:
==================
instead of if else if blocks
we have multipule bolck of the code called cases

enchances readbility of the code...

syntax:
======
swtich(expression){
case 1: 
    // code
	break;
case 2:
   // code
   break:
default:
//code

}

2.Iterative statements/ loop statements:
========================================
we have 3 types of loop/iterative 

1.for loop
2.while loop
3.do-while loop

1.for loop:
===========
it used to iterate a part of code several time
if we know no of iterations in advance we will go with for loop

3 things:
===========
1.intilizing the variable
2.condition
3.increment / decrement

2.while loop:
================

if we dont know howmany iterations in advance, we go for while loop
loop is excutes until the condition is true.....


syntax:
=======

while(condition){
// code
increment / decrement

}
3.Do while loop:
=================
if we dont know the how many iterations in advance, but code get executed atleast once

syntax:
======

do{
// code
}while(condition);

3.jump statements/transfer statements:

======================================

1.break
2.continue

1.break:
========

whenever we encounter a break stmt, the body of lopp gets terminated

control of the programtransfers to the next statement follwimg loop...

2.continue:
===========
it used to skip the next iteration imediately


Day 12:
=======
oops we can created objects it contains both data members(varaibles) and member function(methods)
oops:
=====
oops paradigm --->4
1.inheritance
2.polymorphisam-------performnace
3.encapusualtion
4.abstruction---------security

key ascpects : class and object

class:
=====

1.class is a blue print for objects

2 it is logical entity
3.collection of data members and member function

4.objects are created for class properties(varaibles,methods)

object:
=======

1.object is instance of class // it allocating the memory
2.objects are created for memory allocation to class properties
3.an object is an entity which has both state and behaviour

example:
========

class student{-----student100

name
rollno
age
contact
}
student1-------Anjali// obj1
                  15
				  25
				  89122
student2---------Gouthami //obj2
                  16
				  24
				  894233
				  
				  
	inheritance:
	============
	accuring the properties from one class to another class.....
	
	properties can be varaibles,methods,constructors,interface...
	
	code reusability*********
	extends,implements keywords in inheritance*******
	
	class A{
	
	//50 methods+11 methods    / / varaibles,constructrs
	
	}
	
	public class B extends A{
	//100 methods // 150 methods + 11 methods
	   50
	}
	
	5 types of inheritance:
	===========================
	1.single inheritacnce-----one parent and one child
	
	2.multilevel inheritance -----chain inheritance--superparent---parent---child
	3.hybride level inheritance
	4.multipule inheritance------>
	5.hirearical inheritance-----one parent,number of childs
	
	** multipule inheriance is not supported in java @classlevel
	
Day 13:
=======
multilevel inheritance:
=======================
DAY-14:
======
Multipule Inheritance:
=====================
	**multipule inheritance is not suported at @class level
	** multipule inheritance is suppoertedd at @interface level
	abstract methods and concreete methods:
	======================================
	concrete methods:
	=================
	return ttype methodname(){ // method signature
	
	//logic(method body)
	}
	a method with body(logic) or a method with implementation
	
	
	abstract methods:
	================
	a method is without implementation 
	
	public abstract void m1();
	
	
	
	
	**abstract keyword
	why????
	
	Security
	
	Abstruction:
	==============
	
	hiding the unwanted things from the end user.....
	
	abstract class and Interface:
	=============================
	concrete class:  coolection of concrete methods
	
	abstract class: collection of both concrete method and abstract methods
	
	**interface class: collection oof abstarct methods..
	
	we cannot create objects for abstract class and interface....
	
	2 ways:
	=======
	abstract class: (0-100%)
	
	interface:   100%
	
	DAY-15:
	========   
	class A {                                   
    public void m1(int a, int b){
	
	Syso(a+b);
	}
	
	}
	
	class B {                                   
    public void m1(int a, int b){
	
	Syso(a*b);
	}
	
	}
	public class Multipule extends A,B {
	 psvm(Sgring[] args){
	 Multipule mi = new Multipule();
	 mi.m1();
	 
	 }
	
	}
	
	polymorphisam:
	=============
	poly----->> many
	morphs---->>forms
	having many forms....
	
	
	single task in different ways-----in java..
	
	eg: humans...
	
	print method......code readibilty....
	
	printString
	printFloat
	printInt
	
	2 types:
	========
	1.compile time polymorphisam
	2.Run time polymorhisam
	
	2 ways...
	1.Method overloading
	
	2.Method Overridding.....
	
	Day-16
	========
	
	1. method overloading:
	========================
	
	method name is same but signature is different
	3 ways:
	1.num of parameters
	2.order of parameters
	3.type of parameters
	
   print----overloaded to accept all types of data....
   printString
   printInt
   printFLOat
   
   + addition ,concatenation....
   
   firstname + lastname=====GouthamiVaddepalli
   
   1+2 = 12
   
   type promotion in method overloading:
   =====================================
   smaller type to larger type conversions....
   
   methodoveridding:
   ================
   Method name is same ,but implementation is different...
   parent class method will be overridden by child class
   
   rules:
   ======
   method name is same and signature has to same..
   parent child relation.....
   
   
   parent-child
   
   
   class Parent{
     int Property(){
	 return 100000000000;
	 }
      publi void Wedding(){
	   s.o.p("SAM");
	  
	  }
	  
	  class Child extens Parent{
	  @override
	  public void Wedding(){
	  Syso("Thamanna");
	  }
	  Child overr = new Child();
	  overr.Wedding();
	  
	  }
   
   }
  Day-17:
=========  
   constructor:
   
   ==========
   ** this is special method...
   used to intilize the object..
   
   int a;// declaration
   
   int a = 10;// intliazation
   
   classname obj = new classname();
   
   classname obj = new constructor();
   
   ** constructor get called evertime whenver an object is created....
   
   rules:
   =====
   1.classname and constructor name both need to be same..
   
   2.no return type...
   
   2..responsiblities:
   ===================
   
   1.to intilizing the object
   2.to provide default values to the instance properties...
   
   
   2 types:
   
   1.Default constructor------without parameters
   2.Paramereized constructor...with parametrs
   
   
   class Test{
   
   Test(){
   
   
   }
   
   
   }
   
   class A{
   int b; // instance
   pvsm(){
   A obj = new A();
   S.o.p(obj.b) // 0
   }
   
   }
   
   
   note:
   ====
   ** compiler automatically creates a default  constructor if there is none....
   
   Parameterized Constructor:
   =========================
   class Test{
   
   Test(Parameters){
   
   }
   
   
   }
   
   Day-18
   =======
   
   Parameterized Constructor:
   
   =========================
   used to cretate the values and no of objectes...
   class Test{
   
   Test(Parameters){
   
   }
   ** we can take only one default construcor
   ** we can take multiple paramerezied constructor...
   
   
   }	
	
	Day -19:
	=======
	final,this,super keywords:--
	
	final :
	======
	3 palces :
	
	1. before a variable
	2. before method
	3. before class
	
	1.before a variable:
	====================
	once declared with final ,values within the varible cannot be chaned
	 i + 6 constant
	
	2.before a method:
	==================
	
	cannot change the method implementaton(overridding is not possible)
	
	3.before class:
	===============
	we cannot extend the propertoes(final class)
	inheritance is not possilbe 
	
	this,super keywords:
	====================
	** this keyword is used to refer to the current class properties
	** super keyword is used to refer the parent class properties
	
	* propertiess can be varible,method,object,constructor.....
	
      constructor call must be in first stattemnet in constructor
	  
	 Day-20:
	 ======
	 accesss modifiers:
	 ==================
	 
	 4 modifiers:
	 ============
	 
	 1. public 
	 
	 2. protected 
	 
	 3. private 
	 
	 4. default
	 
	 Day -21:
	 =======
	 Encapsulation:
	 ==============
	 wrapping up data members and member functions
	 
	 private -----
	 
	 public methods-----2 types
	 setters
	 getters
	 
	Day -22:
	========
	String class:
	==============
	
	sequence/collection of characters....
	
	>It is non-primitive datatype
	
	>>predefined class available from java.lang.package...
	
	>> special class for representing the set of characters....
	
	String name = "Gouthami";
	
	note:
	=====
	
	All the strings are object of a predefined class called string..
	
	3 classes:-----String 
	
	1.String
	2.StringBuffer
	3.StringBulider
	
	all these are avaiable in java.lang.package
	
	1.String class:  immutable strings(not changble)
	2.StringBuffer,StringBulder : Muttable(changeable)
	
	
	String:
	======
	2 ways to create String object
	
	1.by using literal syntax:
	    String name = "Welcome";
	
	2.by using new keyword 
	
	    String name = new String("Welcome");
		
		
		memory areas:
		=============
		instance: Heap area
		static : Method area
		local : Stack area..
		
		StringConstantPool:(SCP)
		======================
	    String is a special class, it will get memoryspace in string constant pool...
		
		** scp does not allow duplicates.
		
		1.using String literal:
		======================
		String name = "Welcome";
		String name1 = "Welcome";
		Strig name2 = "Welcome";
	
	Day -23:
	=======
	"=="
	comapreTo()
	equals()
	
	"==" operator checks for the memory reference
	
	equals () checks for the values..
	
	returns compareTo()  int values 
	
	>> comparing the string lexicographically
	
	     returns 0 , if both objects are same
		 
		 returns negative,if obj1 comes before obj2...
		 
		 returns positive,if obj1 comes after obj2...
		 
		 
		why string is immutable:
		========================
		StringConstantPoll
		
		it does not allows duplicate values...
		
		StringBuffer and StringBulider:
		===============================
        StringBuffer sb = new StringBuffer("java");
		
		string---equals()-----check values
		sb ---equals()------memory references..
		
		difference:
		==========
		StringBuffer --- synchronized methods
		StringBuilder----no synchronized methods
		
		
		synchronized methods:
		=====================
		t1, t2, t3
		
		thread safety---advantage
		
		at a time (simautaniuosly )
		
	day-24:
    =========

     Arrays:
     ======	
	 
	 It is an indexed collection of fixed no homgenous data elements...
	 
	 **an array in java is an object
	 
	 String name = "Gouthami";
	 
	 String[] name = {"Gouthami","Anjali"} // by using literal
	 
	 int[] num = {1,2,3,4} ;
	 
	 String[] name = new String[2]; // new keyword
	 
	 
	 Advantages:
	 ==========
	 
	 ** stores only similar data
	 ** code redability
	 
	 
	 disadavantages :
	 
	 ==============
	 
	 we canonot change the size.....
	 
	 
	 note:
	 =====
	 array will get stored in heap area
	 
	 arrays can be accessed with the help of index values...
	 
	 2 types of arrays:
	 ==================
	 1.single dimensional array
	 2.multi demensional array...
	 
		
	Day -25:
	========
	Exception Handling:
	===================
	A mechanisam of converting system defined error message into user frinedly error message....
	
	limitiations:
	=============
	1.system defined error message
	2.abnormal termination
	
	exception handling:
	==================
	
	1.try----risky code
	2.catch----handle code
	3.finally--- celan up
	4.throw---- throw the excpetion handling 
	5.throws----declare the exceptions
	
	errors:
	======
	1.compile time errors: poor unserstanding of the lang...
	2.run time error: invalid inputs 
	
	Exception:
	=========
	
	
	exception is an unexpected event that disrupts the noramal flow of the program
	
	object thrown at the runtime.....
	
	types of Exceptions:
	====================
	
	1.checked exception
	
	2.unchecked exception
	
	3.errors...
	
	Day-26:
	=======
	
    Day-27:
	=======
	
	1.System defined 
	2.user defined exceptions
	
	throw ----->> to throw the exception handling
	
	throws ---->> to declare the exceptions...
	
	
	user exceptions:
	=================
	
	1.take class -------child to exception class
	extends throwable,exceptions....
	
	2.take one parameterized constructor and a toString method....
	
	Day-28:
	======
	File Handling:
	==============
	File----->predefined class ------->java.io package
	create ,write, read 
	
	predefined classes to write into file:
	=======================================
	
	FileWriter
	BufferedWriter
	PrintWriter
	
	predefined classes to read from file:
	======================================
	
	FileReader
	BufferedReader
	
	File:
	=====
	File f = new File("sample.txt");
	
	FileWriter:
	==========
	
	write() ------------->to write the data
	
	limitiations:
	============
	
	1.it does not allow the numbe format
	2.everytime will give the '\n'
	3.'\n ' is not supported  in every OS
	
	2.BufferedWriter:
	==============
	limitations:
	===========
	1. no number data is allowed
	2. we have to use newLine() everytime
	
	3.PrintWriter:
	==============
	println()
	
	FileReader:
	===========
	limitations:
	============
	time taking
	read()------------char by char
	
	BufferedReader:
	===============
	
	readLine()----------->>It reads line by line
	
	serialization and deserialization:
	===================================
	
	Serialzation:   converting the obj data into byte data
	
	
	=============
	
	to serializae:
	
	2 classes:
	
	1.FileOutputStream
	
	2.ObjectOutputStream---------->> WriteObject()
	
	DE-Serialization:     converting the byte data into obj data..
	
	==================
	   1.FileInputStream
	
	   2.ObjectInputStream---------->> readObject()
	   Serializable(Marker Interface)-----no abstract methods(0)
	   
	 Day -29:
	 ========
	 
	 Multithreading:
	 ===============
	 Multi tasking:
	 ==============
	 Exceuting several tasks at a time
	 
	 1.process based multitasking
	 2.Thread based multitasking
	 
	 
	 process:
	 ========
	 collection of threads
	 
	 Eg: laptop
	 
	 Thread:
	 ========
	 it is a smallest unit of process...
	 inside one process,mutipule threads excutes simutaneously.
	 
	 Advantage of multithreading:
	 ============================
	 
	 class Test{
	 
	 1.------//  5 hours  Thread1
	 2...-----
	 .
	 .
	 .
	 .
	 10,122.....Thread2
	 
	 }
	 
	 2 ways :
	 =======
	 1.by implementing runnable interface
	 
	 2.by extending Thread class.
	 
	 Runnable Interface:
	 ==================
	 Runnable interface is a Functional Interface
	 javap java.lang.Runnable
	 public interface java.lang.Runnable {
     public abstract void run();
       }

---single abtract method------(SAM)

    class Test implements Runnable {
	run(){
	
	//code for which thread need to be created
	}
	
	}
	
	Day-30:
	=======
	Thread class:
	=============
	child class for Runnable interface
	-->> start()
	Thread Priorities:
	================
	priority 1-10
	
	1- min priority
	10-max priority
	
	5- default properity
	
	**currentThread()-------------->> executing the current class object..
	
	Day-31:
	======
	Thread Life Cycle:
	==================
	https://www.javamadesoeasy.com/2015/03/thread-states-thread-life-cycle-in-java.html
	sleep()---------->1000 ns---1 Sec
	
	join()--------> thread is execute first
	
	
	Synchronization:
	=================
	t1,t2,t3-----
	
	Day-32:
	=======
	Collections FrameWork:
	======================
	FrameWork:
	==========
	readmade arichtiure...
	
	Collections:
	============
	we can stored group of objects into single entity....
	
	limtiations of arrays:
	======================
	1.we can store only similiar kind of objects...
	
	2.only fixed size 
	
	3.we dont have a utility methods
	
	Advantages of Collections:
	==========================
	
	1.we can store the homogenous and hetrogenous objects/elemenets
	
	2. we have a utility methods
	
	3.we increases the size
	
	collections are present in the  java.util package
	
	Day-33:
	=======
	
	ArrayList default size is 10
	
	formula
	
	LinkedList default size is 10
	
	vector default size is 10
	
	
	Iterator----Interface
	
	2 methods
	
	hasNext()----------it checks elements are there or not
	
	next()--------------it prints line by line
	
	Day - 34:
	==========
	map:
	====
	key : value pair
	
	Comparable and Comparator
	
	comparable-----java.lang.package(compareTo)
	
	compartor --------java.util pacakge(compare())
	
	eg:
	
    bat.comapreTo(cat);
	
	-negative(-1)  
	+ positive
	
	reverse order:
	==============
	
	1.we have inetger change objects
	2.we can give - sign before object...
	
	Day-35:
	=======
	Bank CaseStudy :
	
	===============
	
	Day-36:
	========
	Bank CaseStudy:
	==============
	
	Day - 37:
	==========
	Bank casestudy
	
	Day - 38:
	=========
	Bank Casestudy
	
	Day -39:
	========
		java 8:
		=======
		2014, march 18th
		
		10 lines in python ---------Fuctional programming
		
		100 lines in java
		
		1.lambda Expression
		
		2.Functional Interface
		
		3.default,static methods in interface
		
		4.predefined functional intefaces
		    1.predicate
			2.Functional
			3.Suppler
			
			4.consumer
			
		5.Date and Time API
		
		objectives of java8:
		===================
		1.Simplified code(concise)
		2.to introduce functional programming
		3.to enable parallel programming
		
		1.Lambda Expression:
		====================
		
		Annoymus Functional
		
		   Nameless
		   
		   No return Type
		   
		   NO accessModifier
		   
		   eg: 
		     public void m1(){
			 Syso("Hello");
			 }
		   Lambda EXpression:
		   ++=============+====
		   
		   ()->Syso("Hello");

			
			
			->   ------->>>Symbol
		   
		   
		  
		 void addition(int a , int b){
		     Syso(a+b);
		  
		  } 
		   
		   L.E :
		   =====
		   ( a , b)->Syso(a+b);
		   
		   
		   2.Functional Interface:
		   =======================
		   
		   one abstract method----->> SAM
		   
		   Annotion----->>
		   @FunctionlInterface------->it is optional
		   
		Day-40:
		=======
		
		Default ,static methods in interfaces:
		======================================
		Default method in interface:
		==========================
		
		interface I {
		  void m1();
		  Default void m2(){
		     
			 Syso("Hi");
		  
		  }
		
		}
		
		class One implements I{
		
		 void m1();
		
		 }
		 @Override
		public void m2();
		Syso("Hello");
		 }
		}
		
		class Two implements I{
		 void m1();
		
		 }
		}
		class Three{
		 void m1();
		
		 }
		
		}
		
		Static methods in interfaces:
		=============================
		
		
		class        vs                                                       interfaces
		
		 1.we are having imlentation                                interfaces have only abstract methods,we dont create any obj,there is no implenation classes
		 
		 2. dont create any obj
		 
		 3.collection of data
		 
		 
		 heavier ,   costly 

		 lighter,cheap
		 
	Day-41:
	======
	API
    
    LocalTime
    LocalDate ------->>  YY-MM -DD
    LocalDateTime	
	
	Streams:
	========
	if we want to process  objects from the collections-----Stream
	
	java.util.stream package
	
	Stream s = c.stream();
	
	
	----->>filter()
	------>> map()
	------->> count()
	-------->> sorted()
	
	Collections:
	============
	
	if we want to store group objects into single entity....
	
	ArrayList<Integer> l = new ArrayList<>();
	
	l.add(0);
	l.add(10);
	l.add(20);
	l.add(15);
	l.add(25);
	l.add(30);
	Syso(1); [0,10,20,15,25,30]
	
	list<Integer> l1 = new ArrayList<>();
	
	for(Integer: i : l){
	   if(i % 2==0){
	   l1.add(l);
	   }
	   Syso(l1);
	
	}
	
	streams----java 1.8 onwards
	
	List<Integer> l1 = l.stream().filter(i->i%2==0).collect(Collectors.toList());
	
	Syso(l1);
	
	
	
	Day-42:
	======
	Layered Architecture